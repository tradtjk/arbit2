import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from arbitrage import ArbitrageScanner

API_TOKEN = "7726968232:AAHL0sl84733e69DXld2E0bWTyOvsf8ReaE"
CHAT_ID = "7726968232"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scanner = ArbitrageScanner()

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üîç –°–ö–ê–ù"), KeyboardButton("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"))

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å–∫–∞–Ω–µ—Ä!", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üîç –°–ö–ê–ù")
async def manual_scan(message: types.Message):
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    results = await scanner.scan()
    if results:
        for res in results:
            await message.answer(res, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(lambda message: message.text == "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def toggle_monitoring(message: types.Message):
    if not scanner.monitoring:
        await message.answer("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
        await scanner.start_monitoring(bot, CHAT_ID)
    else:
        scanner.stop_monitoring()
        await message.answer("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp)